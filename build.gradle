buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE")
    }
}

plugins {
//    id "at.comm_unity.gradle.plugins.jpamodelgen" version "1.1.2"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

jar{
	baseName = 'wlpt'
	version = '0.1.0'
}

sourceSets{
    //集成测试相关配置
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
    main{
        java{
            exclude '**/DatabaseConfig.java'
//                    '**/ResourceRange.java',
//                    '**/MyResourceRange.java'
//                    '**/ResourceRangeRepository.java',
//                    '**/MyResourceRangeRepository.java'
        }
    }
}

//jpaModelgen {
//    library = "org.hibernate:hibernate-jpamodelgen:5.2.6.Final"
//}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    group = "verification"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile(
//            "org.springframework.boot:spring-boot-devtools",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.boot:spring-boot-starter-cache",
            "org.springframework.security:spring-security-acl",
            "com.h2database:h2",
            "net.sf.ehcache:ehcache",
            "org.apache.commons:commons-lang3:3.5"
    )
//    runtime("mysql:mysql-connector-java:5.1.39")
    testCompile(
            "org.springframework.boot:spring-boot-starter-test",
            "org.springframework.security:spring-security-test"
    )
    integrationTestCompile(

    )
}

//-------------------------------------------------------------------------------------------------
// 用于生成JPA的 JPA Static Metamodel Classes,动态查询需要使用
// Important!!! Following configuration of compile java arguments
// should be ALWAYS present when using jpamodelgen plugin.
//compileJava.options.compilerArgs += ["-proc:none"]
//-----------------------------------------------------------------------------------------------------
